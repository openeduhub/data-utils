:PROPERTIES:
:header-args: :results verbatim :exports both
:END:
#+title: Data Retrieval Utilities
#+EXPORT_EXCLUDE_TAGS: noexport

A Python library that aids in retrieving and processing large data dumps from [[https://github.com/elasticsearch-dump/elasticsearch-dump][elasticdump]], primarily for the purpose of training and evaluation of AI tools for the automatic generation of metadata.

There are two primary modules of this library:
- ~data_utils.fetch~, which aids in downloading ~elasticdump~ data dumps and can turn them into ~pandas~ data frames.
  Secondarily, it implements some functionality for retrieving labels or other metadata for URIs and SKOS vocabularies.
- ~data_utils.default_pipelines~, which collects various useful pipelines, such as ~data_utils.default_pipelines.flat_classification~, that turn the data dumps into more readily usable forms whilst applying some light pre-processing.

For the purposes of downloading data dumps, this library also offers a CLI tool: ~download-data~.

* Usage / Installation

** Nix Flakes (recommended)

When using / installing this library through ~Nix Flakes~, the only requirement is having installed [[https://nixos.org/download][Nix]] with ~Flakes~ support.

*** Running the CLI

The CLI can be run directly through ~Nix~'s CLI:
#+begin_src shell
nix run "github:openeduhub/data-utils#download-data" -- <optional arguments> <url>
#+end_src

Example:
#+begin_src shell
nix run "github:openeduhub/data-utils#download-data" -- --help
#+end_src

#+RESULTS:
#+begin_example
usage: download-data [-h] [-i INPUT_FILE] [-u USERNAME] [-p PASSWORD]
                     [-o OUTPUT_FILE] [--skip-if-exists] [--no-delete-archive]
                     [--version]
                     url

positional arguments:
  url                   The (base) URL from which to download the data dump.

options:
  -h, --help            show this help message and exit
  -i INPUT_FILE, --input-file INPUT_FILE
                        The name of the file from the URL to be downloaded. It
                        is assumed that this file is accessible through
                        <url/target-file>.
  -u USERNAME, --username USERNAME
                        The username to use when providing authentication
                        details. Optional unless a password is provided.
  -p PASSWORD, --password PASSWORD
                        The password to use when providing authentication
                        details. Optional unless a username is provided.
  -o OUTPUT_FILE, --output-file OUTPUT_FILE
                        The path to the output file. If a directory, save the
                        (decompressed) target file to this directory.
  --skip-if-exists      Skip files that already exist.
  --no-delete-archive   Do not delete the original archive if it was
                        compressed.
  --version             show program's version number and exit
#+end_example

*** As Python library, Option A: using lib

To use the library as part of a bigger Python environment, e.g. to use in another application, first include this ~Flake~ within the inputs of your own =flake.nix=:
#+begin_src nix
# flake.nix
{
  inputs = {
    data-utils.url = "/home/yusu/work/ITsJointly/projects/data_utils";
  };
}
#+end_src

Then, you can reference the Python library with the ~data-utils.lib.${system}.data-utils~ attribute. This requires a reference to the Python packages that the library shall be built with, e.g.
#+begin_src nix
# flake.nix
{
  outputs = { self, nixpkgs, ... }:
    let
      system = ...;
      pkgs = nixpkgs.legacyPackages.${system};
      my-python = pkgs.python3.withPackages (py-pkgs: [
        # example python libraries to include
        py-pkgs.pandas
        py-pkgs.numpy
        # include data-utils library
        (self.inputs.data-utils.lib.data-utils py-pkgs)
      ]);
    in
      {...};
}
#+end_src

*** As Python library, Option B: using overlays

Just like with option A, include this ~Flake~ within your own:
#+begin_src nix
# flake.nix
{
  inputs = {
    data-utils.url = "/home/yusu/work/ITsJointly/projects/data_utils";
  };
}
#+end_src

Then, when importing ~nixpkgs~, you can apply the provided overlay, which in turn allows you reference to ~data-utils~ just like any other Python library:
#+begin_src nix
# flake.nix
{
  outputs = { self, nixpkgs, ... }:
    let
      system = ...;
      pkgs = nixpkgs.legacyPackages.${system}.extend
        self.inputs.data-utils.overlays.default;
      my-python = pkgs.python3.withPackages (py-pkgs: [
        # example python libraries to include
        py-pkgs.pandas
        py-pkgs.numpy
        # include data-utils library
        py-pkgs.data-utils
      ]);
    in
      {...};
}
#+end_src


** Through pip

This library should also be installable through Python's ~pip~. Simply running ~pip install~, i.e.
#+begin_src shell
pip install <this repository>
#+end_src
should be sufficient. However, this method of installation is untested.
